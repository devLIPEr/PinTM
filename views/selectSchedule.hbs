<!DOCTYPE html>
<html lang="en">
{{> headController }}
<body onload="bodyLoad(); verifyAuthentication(); verifyColorBlindness();">
    {{> headerController }}
    <main class="mainSelectHorario">
        <div class="h2SelectHorario">
            <h2>Melhores Horários</h2>
        </div>
        <table>
            <tr>
                <th></th>
                <th>Seg</th>
                <th>Ter</th>
                <th>Qua</th>
                <th>Qui</th>
                <th>Sex</th>
                <th>Sab</th>
            </tr>
            <tr class="blankRow">
                <td colspan="3"></td>
            </tr>
            {{#horarios}} {{!-- Tabela de Horários --}}
                {{#each this}} {{!-- Período --}}
                    <tr>
                        <td>{{horario}}</td> {{!-- Horário do Período (07:30) --}}
                        {{#qualities}} {{!-- Array de qualidades (gerado pelo algoritmo) --}}
                            <td selected="0" quality="{{quality}}"></td> {{!-- Qualidade do horário --}}
                        {{/qualities}}
                    </tr>
                {{/each}}
            {{/horarios}}
        </table>
        <div>
            <p class = "description"></p>
        </div>
        <div class="formSelectHorario">
            <input id="week" type="week">
            <select name="salaInput" id="salaInput">
                <option value="" disabled selected>Sala:</option>
                {{#each salas}}
                    <option value="{{this}}">{{this}}</option>
                {{/each}}
            </select>
            <div class="compartilharBtn">
                <img src="../images/compartilharPDF.png" alt="Compartilhar via PDF" onclick="goToPDF();">
            </div>
            <div class="compartilharBtn">
                <img src="../images/compartilharEmail.png" alt="Compartilhar por mensagem" onclick="copyToClipboard('{{materia}}', '{{curso}}');">
            </div>
        </div>
    </main>
    {{> footer }}
    <script src="../js/index.js"></script>
    <script>
        function verifyColorBlindness(){
            var colorBlind = sessionStorage.getItem("isColorBlind");
            var description = document.getElementsByClassName("description")[0];
            if(colorBlind != undefined && colorBlind != "null" && colorBlind != null && colorBlind != false && colorBlind != "false"){
                const td = document.querySelectorAll('td');
                td.forEach((cell) =>{
                    if(!cell.innerText){
                        var quality = parseInt(cell.getAttribute("quality"));
                        if(!isNaN(quality)){
                            cell.innerText = quality + 1;
                        }
                    }
                });
                description.innerText = "Legenda: valores mais próximos do 1 são horários ruins, enquanto valores próximos de 5 são horários bons!";
            } else {
                description.innerText = "Legenda: células de cores mais próximas do vermelho são horários ruins, enquanto células com cores próximas do verde são horários bons!";
            }
        }

        var selectedClasses = [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ];
        var times = ['07:30', '08:20', '09:10', '10:10', '11:00', '13:20', '14:10', '15:00', '16:00', '16:50', '17:40', '18:50', '19:40', '20:30', '21:30', '22:20'];
        var schedules = [];

        function setClicks(){
            var tds = document.querySelectorAll('td[selected="0"]');
            for(var i = 0; i < tds.length; i++){
                tds[i].setAttribute("id", 'td'+i)
                tds[i].setAttribute("onclick", `changeSelected("#td${i}")`)
            }
        }

        function changeSelected(id){
            var td = document.querySelector(id);

            var index = parseInt(id.substr(3))
            var row = Math.floor(index/6);
            var col = index-row*6;
            selectedClasses[row][col] ^= 1;

            td.setAttribute("selected", (td.getAttribute("selected") == "0") ? "1" : "0");
        }

        function setDate(){
            var date = new Date();
            date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            var firstDayOfYear = new Date(Date.UTC(date.getFullYear(), 0, 4));
            var days = Math.floor((date - firstDayOfYear) / (1000 * 60 * 60 * 24));
            var weekNumber = Math.ceil((days + firstDayOfYear.getUTCDay() + 1) / 7);
            if(weekNumber < 10){
                weekNumber = '0' + weekNumber;
            }
            document.getElementById("week").setAttribute("value", `${date.getFullYear()}-W${weekNumber}`);
            document.getElementById("week").setAttribute("min", `${date.getFullYear()}-W${weekNumber}`);
            document.getElementById("week").setAttribute("max", `${date.getFullYear() + 1}-W${weekNumber}`);
        }

        var creating = false;
        async function createRepositions(){
            if(!creating){
                creating = true;
                var sala = document.getElementById('salaInput').value;
                var transposedSchedule = selectedClasses[0].map((_, colIndex) => selectedClasses.map(row => row[colIndex]));
                schedules = [];
                var schedule = {subject: '{{materia}}', course: '{{curso}}', date: '06/06/9420', start: '00:00', end: '00:00', classroom: sala, repoId:''};

                for(var i = 0; i < 6; i++){
                    for(var j = 0; j < 16; j++){
                        if(transposedSchedule[i][j]){
                            if(schedule['start'] == '00:00'){
                                schedule['start'] = times[j];
                                var newDate = new Date(document.getElementById('week').valueAsNumber);
                                newDate.setDate(newDate.getDate()+i+1);
                                schedule['date'] = `${("0" + newDate.getDate()).slice(-2)}/${("0" + (newDate.getMonth() + 1)).slice(-2)}/${newDate.getFullYear()}`;
                            }
                        }else{
                            if(schedule['start'] != '00:00'){
                                schedule['end'] = times[j];
                                schedules.push(schedule);
                                schedule = {subject: '{{materia}}', course: '{{curso}}', date: '06/06/9420', start: '00:00', end: '00:00', classroom: sala, repoId:''};
                            }
                        }
                    }
                }

                // Post to save on DB
                var created = true;
                var message = false;
                for(var schedule of schedules){
                    var creation = await fetch('createReposition', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        credentials : "include",
                        body: JSON.stringify({subject: schedule.subject, course: schedule.course, date: schedule.date, start: schedule.start, end: schedule.end, classroom: schedule.classroom})
                    })
                    .then(response => response.json())
                    .then(data => {
                        if(!data.mensagem){
                            schedule.repoId = data._id;
                            return true;
                        } else {
                            if(!message){
                                alert(data.mensagem);
                                message = true;
                            }
                            return false;
                        }
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                        return false;
                    });
                    if(!creation){
                        created = false;
                    }
                }
                return created;
            }
        }

        function bodyLoad(){
            setClicks();
            setDate();
        }

        async function goToPDF(){
            if(!creating){
                var created = await createRepositions();
                creating = false;
                if(created && schedules.length > 0){
                    var lastRepo = schedules[schedules.length-1];

                    window.location.href = 'pdf/'+lastRepo.repoId;  
                }
            }
        }
        
        async function copyToClipboard(){
            if(!creating){
                var created = await createRepositions();
                creating = false;
                if(created && schedules.length > 0){
                    var lastRepo = schedules[schedules.length-1];
                    texto = "Aviso: Reposição de " + lastRepo.subject + " do curso de " + lastRepo.course + ", dia " + lastRepo.date + " às " + lastRepo.start + " no local " + lastRepo.classroom + ".";
                    navigator.clipboard.writeText(texto)
                    .then(() => {
                        alert("Texto copiado para a área de transferência.");
                        window.location.href = '../reposition/account';
                    });
                }
            }
        }
    </script>
</body>
</html>
